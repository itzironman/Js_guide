================================today's date============================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Mini Calendar</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <div class="calendar-container">
      <p class="month-name" id="month-name">April</p>
      <p class="day-name" id="day-name">Friday</p>
      <p class="day-number" id="day-number">20</p>
      <p class="year" id="year">2020</p>
    </div>
    <script src="index.js"></script>
  </body>
</html>
-----------------------------------
const monthNameEl = document.getElementById("month-name");
const dayNameEl = document.getElementById("day-name");
const dayNumEl = document.getElementById("day-number");
const yearEl = document.getElementById("year");

const date = new Date();
const month = date.getMonth();
monthNameEl.innerText = date.toLocaleString("en", {
  month: "long",
});

dayNameEl.innerText = date.toLocaleString("en", {
  weekday: "long",
});

dayNumEl.innerText = date.getDate();

yearEl.innerText = date.getFullYear();
----------------------
body {
  margin: 0;
  display: flex;
  justify-content: center;
  height: 100vh;
  align-items: center;
  font-family: cursive;
  background-color: slateblue;
}

.calendar-container {
  background-color: white;
  width: 300px;
  text-align: center;
  border-radius: 10px;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
  overflow: hidden;
}

.month-name {
  margin: 0;
  background-color: orangered;
  color: white;
  padding: 10px;
  font-size: 30px;
  font-weight: bold;
}

.day-name {
  font-size: 20px;
  color: darkgray;
}

.day-number {
  font-size: 80px;
  margin: 0;
  font-weight: bold;
}

.year {
  margin: 20px 0;
  font-size: 20px;
  color: darkgray;
  font-weight: 500;
}
-----------------------------------------------------------------------------------
=====================================sidebar====================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sahand Ghavidel</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" integrity="sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w==" crossorigin="anonymous" />
    <link rel="stylesheet" href="styles.css">
</head>
<body>
    <i class="fa fa-bars" aria-hidden="true"></i>

    <div class="sidebar">
        <div class="sidebar-header">
            <img class="logo" src="logo.svg" alt="logo">
            <i class="fa fa-times" aria-hidden="true"></i>
        </div>
        <ul class="menu">
            <li><a href="#">Home</a></li>
            <li><a href="#">About</a></li>
            <li><a href="#">Contact</a></li>
        </ul>
    </div>
    <script src="index.js"></script>
</body>
</html>
----------------------------
const bars = document.querySelector(".fa-bars");
const sidebar = document.querySelector(".sidebar");
const closingButton = document.querySelector(".fa-times");

bars.addEventListener("click", () => {
  sidebar.classList.toggle("show-sidebar");
});

closingButton.addEventListener("click", () => {
  sidebar.classList.remove("show-sidebar");
});
------------------------------
* {
  margin: 0;
  padding: 0;
}

body {
  font-family: sans-serif;
  background: #ebebeb;
}

.menu a {
  display: block;
  font-size: 1.5rem;
  padding: 1rem 1.5rem;
  color: grey;
  transition: all 0.3s linear;
  text-decoration: none;
}

.sidebar {
  position: fixed;
  top: 0;
  left: 0;
  background: white;
  width: 100%;
  height: 100%;
  transition: all 0.3s linear;
  transform: translate(-100%);
}

.show-sidebar {
  transform: translate(0);
}

.fa-bars {
  position: fixed;
  top: 2rem;
  right: 3rem;
  color: #e94949;
  font-size: 1.5rem;
  cursor: pointer;
}

.fa-bars:hover {
  color: black;
}

.fa-times {
  font-size: 1.5rem;
  color: #e94949;
  cursor: pointer;
}

.fa-times:hover {
  color: black;
}

.sidebar-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 1rem 1.5rem;
}

.logo {
  margin-left: -15px;
}

@media (min-width: 676px) {
  .sidebar {
    width: 500px;
  }
}

.menu a:hover {
  background: #f8a5a5;
  padding-left: 1.7rem;
}
-------------------------------------------------------------------------------
=================================navbar===================================
body {
  margin: 0;
  padding: 0;
  font-family: sans-serif;
  background: #f1f5f8;
  line-height: 2.2;
  font-size: 0.875rem;
}

ul {
  list-style-type: none;
}

a {
  text-decoration: none;
}

nav {
  background: white;
  box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
}

.fa-bars {
  font-size: 1.5rem;
  color: #e94949;
  cursor: pointer;
}

.fa-bars:hover {
  color: black;
}

.menu a {
  color: grey;
  letter-spacing: 0.1rem;
  display: block;
  padding: 0.5rem 1rem;
  transition: all 0.3s linear;
}

.menu a:hover {
  background: #f8a5a5;
  color: #e94949;
  padding-left: 1.5rem;
}

.menu {
  height: 0;
  overflow: hidden;
  transition: all 0.3s linear;
}

.show-menu {
  height: 10rem;
}

.nav-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  padding: 1rem;
}

@media (min-width: 800px) {
  .nav-main {
    max-width: 1170px;
    margin: 0 auto;
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1rem;
  }

  .nav-header {
    padding: 0;
  }
  .fa-bars {
    display: none;
  }

  .menu {
    height: auto;
    display: flex;
  }

  .menu a {
    padding: 0;
    margin: 0 0.5rem;
  }
  .menu a:hover {
    padding: 0;
    background: transparent;
  }
}
----------------------
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Navbar project</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
      integrity="sha512-iBBXm8fW90+nuLcSKlbmrPcLa0OT92xO1BIsZ+ywDWZCvqsWgccV3gFoRBv0z+8dLJgyAHIhR35VZc2oM/gI1w=="
      crossorigin="anonymous"
    />
    <link rel="stylesheet" href="styles.css" />
  </head>
  <body>
    <nav>
      <div class="nav-main">
        <div class="nav-header">
          <img src="./logo.svg" alt="logo" />
          <i class="fa fa-bars" aria-hidden="true"></i>
        </div>
        <ul class="menu">
          <li>
            <a href="#">Home</a>
          </li>
          <li>
            <a href="#">About</a>
          </li>
          <li>
            <a href="#">Contact</a>
          </li>
        </ul>
      </div>
    </nav>
    <script src="index.js"></script>
  </body>
</html>
----------------------
const bar = document.querySelector(".fa-bars");
const menu = document.querySelector(".menu");

bar.addEventListener("click", () => {
  menu.classList.toggle("show-menu");
});
------------------------------------------------------------------------------
==============================note====================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <h1 class="heading">Note App</h1>
    <p class="info-text">Double click on a note to remove it</p>
    <div class="app" id="app">
      <!-- <textarea
        cols="30"
        rows="10"
        class="note"
        placeholder="Empty Note"
      ></textarea> -->

      <button class="btn" id="btn">+</button>
    </div>
    <script src="index.js"></script>
  </body>
</html>
----------------------------
body {
  margin: 0;
  background: linear-gradient(to left, lightblue, lightgreen);
  font-family: "Courier New", Courier, monospace;
}

.heading {
  color: darkblue;
  text-align: center;
  padding-top: 10px;
  font-size: 35px;
}

.info-text {
  text-align: center;
  color: darkblue;
  font-size: 18px;
}

.app {
  display: grid;
  grid-template-columns: repeat(auto-fill, 300px);
  gap: 40px;
  justify-content: center;
  padding: 50px;
}

.note {
  padding: 17px;
  border-radius: 15px;
  resize: none;
  box-shadow: 0 0 3px rgba(0, 0, 0, 0.3);
  font-size: 18px;
  height: 200px;
  color: darkblue;
  border: none;
  outline: none;
  background: rgba(255, 255, 255, 0.1);
  box-sizing: border-box;
}

.note::placeholder {
  color: gray;
  opacity: 30%;
}

.note:hover,
.note:focus {
  box-shadow: 0 0 10px rgba(0, 0, 0, 0.3);
  transition: all 300ms ease;
}

.btn{
    height: 200px;
    border-color: rgba(255, 255, 255, 0.37);
    background: rgba(255, 255, 255, 0.27);
    border-radius: 15px;
    font-size: 70px;
    font-weight: 700;
    color: rgba(0, 0, 0, 0.3);
    cursor: pointer;
}

.btn:hover{
    background: rgba(255, 255, 255, 0.55);
    color: rgba(0, 0, 0, 0.6);
    transition: all 300ms ease;
}
--------------------
const btnEl = document.getElementById("btn");
const appEl = document.getElementById("app");

getNotes().forEach((note) => {
  const noteEl = createNoteEl(note.id, note.content);
  appEl.insertBefore(noteEl, btnEl);
});

function createNoteEl(id, content) {
  const element = document.createElement("textarea");
  element.classList.add("note");
  element.placeholder = "Empty Note";
  element.value = content;

  element.addEventListener("dblclick", () => {
    const warning = confirm("Do you want to delete this note?");
    if (warning) {
      deleteNote(id, element);
    }
  });

  element.addEventListener("input", () => {
    updateNote(id, element.value);
  });

  return element;
}

function deleteNote(id, element) {
    const notes = getNotes().filter((note)=>note.id != id)
    saveNote(notes)
    appEl.removeChild(element)
}

function updateNote(id, content) {
  const notes = getNotes();
  const target = notes.filter((note) => note.id == id)[0];
  target.content = content;
  saveNote(notes);
}

function addNote() {
  const notes = getNotes();
  const noteObj = {
    id: Math.floor(Math.random() * 100000),
    content: "",
  };
  const noteEl = createNoteEl(noteObj.id, noteObj.content);
  appEl.insertBefore(noteEl, btnEl);

  notes.push(noteObj);

  saveNote(notes);
}

function saveNote(notes) {
  localStorage.setItem("note-app", JSON.stringify(notes));
}

function getNotes() {
  return JSON.parse(localStorage.getItem("note-app") || "[]");
}

btnEl.addEventListener("click", addNote);
-----------------------------------------------------------------------------------
===================Dice==========================================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Dice Roll Simulator</title>
    <link rel="stylesheet" href="style.css" />
  </head>
  <body>
    <h1>Dice Roll Simulator</h1>
    <div class="dice" id="dice">&#9860;</div>
    <button id="roll-button">Roll Dice</button>
    <ul id="roll-history">
      <!-- <li>Roll 1: <span>&#9856;</span></li>
      <li>Roll 2: <span>&#9860;</span></li> -->
    </ul>
    <script src="index.js"></script>
  </body>
</html>
--------------------------
const buttonEl = document.getElementById("roll-button");

const diceEl = document.getElementById("dice");

const rollHistoryEl = document.getElementById("roll-history");

let historyList = [];

function rollDice() {
  const rollResult = Math.floor(Math.random() * 6) + 1;
  const diceFace = getDiceFace(rollResult);
  diceEl.innerHTML = diceFace;
  historyList.push(rollResult);
  updateRollHistory();
}

function updateRollHistory() {
  rollHistoryEl.innerHTML = "";
  for (let i = 0; i < historyList.length; i++) {
    const listItem = document.createElement("li");
    listItem.innerHTML = `Roll ${i + 1}: <span>${getDiceFace(
      historyList[i]
    )}</span>`;
    rollHistoryEl.appendChild(listItem);
  }
}

function getDiceFace(rollResult) {
  switch (rollResult) {
    case 1:
      return "&#9856;";
    case 2:
      return "&#9857;";
    case 3:
      return "&#9858;";
    case 4:
      return "&#9859;";
    case 5:
      return "&#9860;";
    case 6:
      return "&#9861;";
    default:
      return "";
  }
}

buttonEl.addEventListener("click", () => {
  diceEl.classList.add("roll-animation");
  setTimeout(() => {
    diceEl.classList.remove("roll-animation");
    rollDice();
  }, 1000);
});
--------------------
body {
  font-family: "Open Sans", sans-serif;
  text-align: center;
  margin: 0;
}

h1 {
  font-size: 3rem;
  margin-top: 2rem;
}

.dice {
  font-size: 7rem;
  margin: 5px;
  animation-duration: 1s;
  animation-fill-mode: forwards;
}

.roll-animation {
  animation-name: roll;
}

@keyframes roll {
  0% {
    transform: rotateY(0deg) rotateX(0deg);
  }

  100% {
    transform: rotateY(720deg) rotateX(720deg);
  }
}

button {
  background-color: #47a5c4;
  color: white;
  font-size: 1.5rem;
  padding: 1rem 2rem;
  border: none;
  border-radius: 1rem;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

button:hover {
  background-color: #2e8baf;
}

ul {
  list-style: none;
  padding: 0;
  max-width: 600px;
  margin: 2rem auto;
}

li {
  font-size: 1.5rem;
  padding: 0.5rem;
  margin: 0.5rem;
  background-color: #f2f2f2;
  border-radius: 0.5rem;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.3);
  display: flex;
  justify-content: space-between;
  align-items: center;
}

li span {
  font-size: 3rem;
  margin-right: 1rem;
}
---------------------------------------------------------------------------------
=======================Stop watch====================================
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Stopwatch</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>

    <div id="timer">00:00:00</div>
    <div id="buttons">
        <button id="start">Start</button>
        <button id="stop">Stop</button>
        <button id="reset">Reset</button>
    </div>
    <script src="index.js"></script>
</body>
</html>
--------------------------
const timerEl = document.getElementById("timer");
const startButtonEl = document.getElementById("start");
const stopButtonEl = document.getElementById("stop");
const resetButtonEl = document.getElementById("reset");

let startTime = 0;
let elapsedTime = 0;
let timerInterval;

function startTimer() {
  startTime = Date.now() - elapsedTime;

  timerInterval = setInterval(() => {
    elapsedTime = Date.now() - startTime;
    timerEl.textContent = formatTime(elapsedTime);
  }, 10);

  startButtonEl.disabled = true;
  stopButtonEl.disabled = false;
}

function formatTime(elapsedTime) {
  const milliseconds = Math.floor((elapsedTime % 1000) / 10);
  const seconds = Math.floor((elapsedTime % (1000 * 60)) / 1000);
  const minutes = Math.floor((elapsedTime % (1000 * 60 * 60)) / (1000 * 60));
  const hours = Math.floor(elapsedTime / (1000 * 60 * 60));
  return (
    (hours ? (hours > 9 ? hours : "0" + hours) : "00") +
    ":" +
    (minutes ? (minutes > 9 ? minutes : "0" + minutes) : "00") +
    ":" +
    (seconds ? (seconds > 9 ? seconds : "0" + seconds) : "00") +
    "." +
    (milliseconds > 9 ? milliseconds : "0" + milliseconds)
  );
}
function stopTimer() {
  clearInterval(timerInterval);
  startButtonEl.disabled = false;
  stopButtonEl.disabled = true;
}
function resetTimer() {
  clearInterval(timerInterval);

  elapsedTime = 0;
  timerEl.textContent = "00:00:00";

  startButtonEl.disabled = false;
  stopButtonEl.disabled = true;
}

startButtonEl.addEventListener("click", startTimer);
stopButtonEl.addEventListener("click", stopTimer);
resetButtonEl.addEventListener("click", resetTimer);
---------------------------
body {
  background-color: #f0f0f0;
  font-family: "Poppins", sans-serif;
  display: flex;
  flex-direction: column;
  justify-content: center;
  min-height: 100vh;
  overflow: hidden;
  align-items: center;
}

#timer {
  font-size: 7rem;
  font-weight: 700;
  text-shadow: 2px 2px #f8a5c2;
  color: #f92672;
  width: 600px;
  text-align: center;
  margin: 40px auto;
}

#buttons {
  display: flex;
  justify-content: center;
}

button {
  background-color: #f92672;
  color: white;
  border: none;
  font-size: 2rem;
  font-weight: bold;
  padding: 1.5rem 4rem;
  margin: 1rem;
  border-radius: 30px;
  cursor: pointer;
  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.3);
  transition: all 0.2s;
}

button:hover {
  background-color: #f44583;
  box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.5);
}

button[disabled] {
  opacity: 0.5;
  cursor: default;
}

@media (max-width: 800px) {
  #timer {
    font-size: 4rem;
    width: 350px;
  }

  button {
    font-size: 1.5rem;
    padding: 1rem 2rem;
  }
}
-----------------------------------------------------------------------------------------
